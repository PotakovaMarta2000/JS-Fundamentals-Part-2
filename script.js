//Условия
// Этот принцип помогает нам пустить программу или действие по правильному пути, в зависимости от обстоятельств

// if (условие) {
//     // блок кода, выполнится если условие выполняется
// } else {
//     // блок кода, выполнится в противном случае
// }


// Простейшее условие

if (2*4 == 8) {
    console.log('Верно!')
} else {
    console.log('Неверно!')
}

// Условие должно преобразовываться в логический тип данных: true, false
// Операторы сравнения
// >, <, >=, <=  больше, меньше, больше или равно, меньше или равно
// == не строгое сравнение
// === строгое сравнение
// != не строгое неравенство
// !==  строгое неравенство

//Способ №1
// Вложенные условия
let num = 50;

if (num <49) {
    console.log('Неверно!')
} else if (num >100) {
    console.log('Много!')
} else {
    console.log('Верно')
};

// //Пример
let phrase = prompt('Скажи слово друг и заходи')

if (phrase === 'Друг') {
  alert('Привет')
} else {
  alert('Я тебя не знаю')
}


// //Способ №2
// //Тернарный оператор, в его работе участвуют 3 аргумента
(num==50) ? console.log('Верно') : console.log('Неверно!');
// //Бинарный оператор, в его работе участвуют 2 аргумента, пример 2+2
// //Унарный оператор, в его работе участвуют 1 аргумент, например инкремент/декремент

// //Способ №3
// //Конструктор switch, это модификация поддерживающая сразу несколько if()
let numb = 50;

switch (numb) {
    case numb < 49:
        console.log('Неверно!');
        break;
    case numb > 100:
        console.log('Много!');
        break;
    case 50:
    console.log('Верно');
        break;
    default:
    console.log('Что то пошло не так!'); 
        break;      
}

//Пример
let lang = 'ru';

switch (lang) {
	case 'ru':
		alert('Русский текст');
    break;
	case 'en': 
		alert('Английский текст');
	break;
	case 'de': 
		alert('Немецкий текст');
	break;
	default:
		alert('Данный язык не поддерживается'); 
	break;
}


//Циклы
/* Все технические средства, все программы направлены на автоматизацию процессов и облегчению нашего труда
Так мы заменяем однотипные человеческие действия. Так и в программировании, вместо того чтобы писать множество
одинаковых действий, например покрасить много различных кнопок  в один цвет-мы заменяем это одним 
небольшим циклом, который сделает это за нас*/

/* Самый простой вид цикла while */ 
let number = 50;

while (number < 55) {
    console.log(number);
    number++;
}

/* Цикл do while Такой цикл нам необходим, когда мы хотим сначало что то сделать, 
а затем проверить это условие*/

do {
    console.log(number);
    number++;
}
while (number <55);

/* Цикл for, в этом цикле мы можем максимально подробно написать все условия */

for (let i = 1; i < 8; i++) {
    if (i == 6) {
        // break /* цикл останавливается */
        continue /*прерывание 1ой итерации цикла, далее цикл продолжается */
    }
    console.log(i);
}

//Функции
// Функции- это наши действия в скрипте, они используют различные типы данных 
// и изменяют информацию так как мы им укажем, так же это значительно уменьшает нам код-прямо как циклы
//Имя функции.Существует внегласное правило, что оно должно быть глаголом с припиской того, над чем вып-ся 
//действие пример - showForm, getName
//Бывают анонимные функции, кот вып-ся "здесь и сейчас". Без имени мы не можем к ним обращаться
/* Замыкание функции-когда внутри нее есть обращение к какой либо переменной,
    функция сначала ищет эту переменную внутри себя, а потом уже во внешних переменных.
    Поэтому замыкание-это функция вместе со всеми внешними переменными которые ей доступны*/

    let num = 20;//Глобальная переменная

    function showFirstMessage(text) {
    alert(text); 
    let num = 10; // Локальная переменная
    console.log(num);
    }
    showFirstMessage('Hello World!');
    console.log(num);

//Кроме всех этих действий, функция может также вернуть какое то значение, при помощи ключевого слова return
//при том же как только функция видит return, она прекращает свое действие

function calc(a,b) {
    return (a+b);
}
console.log(calc(3,4));
console.log(calc(8,4));

//При помощи return,мы можем записать переменную вне функции
function retVar() {
    let num = 50;
    return num;
}

let anotherNum = retVar();
console.log(anotherNum);

// Function Declaration Функция кот объявлена в потоке кода.Такие функции, как и var сщздается до начала кода
//то есть можем вызывать их еще до объявления

//Function Expression Когда мы функцию присваиваем в переменную
//Эта функция создается только тогда, когда код до нее доходит.Мы не можем вызвать ее заранее, 
//как мы это делали при Function Declaration
// let calc = function(a,b) {
//     return (a+b);
// }
// console.log(calc(3,4));
// console.log(calc(8,4));

// ES6 Стрелочная функция
let calc = (a,b) => a+b;

console.log(calc(3,4));
console.log(calc(8,4));

//Методы и свойства у строк и чисел.
//Методы-вспомогательные функции, а свойства-вспомогательные значения.

let str = 'test';
console.log(str.length);// свойствo

console.log(str.toUpperCase()); //Метод
console.log(str.toLowerCase()); //Метод

//Number
// let twelve = '12.2';
let twelve = '12.2px';
// console.log(Math.round(twelve));
console.log(parseInt(twelve));
console.log(parseFloat(twelve));